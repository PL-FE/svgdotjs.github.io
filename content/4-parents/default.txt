Title: Parents

----

Text: 

# Parents

### SVG.Parent

The `SVG.Parent` class is the base wrapper for all elements that can contain other elements. `SVG.Parent` inherits directly from the lowest level of all SVG.js classes: `SVG.Element`.

### SVG.Container

`SVG.Container` adds another level to the parent inheritance stack. Where `SVG.Parent` brings some low level methods like `add()`, `remove()` and `has()` to name a few, `SVG.Container` can and should be used if you want to add your own methods. That way the `SVG.Parent` prototype remains clean. Therefore you should always inherit from `SVG.Container` when implementing your own parent elements.

The parent inheritance stack is: `SVG.Element` > `SVG.Parent` > `SVG.Container`.

<br>
# SVG.Doc

The main SVG.js initializer function creates a root svg node in the given element and returns an instance of `SVG.Doc`.

## SVG() <span class="suffix">constructor</span>

`returns` __`SVG.Doc`__ ` which inherits from ` __`SVG.Container`__

```javascript
var draw = SVG('drawing')
```

<br>
# SVG.Nested

Nest SVG documents within each other.

## nested() <span class="suffix">constructor</span>

`returns` __`SVG.Nested`__ ` which inherits from ` __`SVG.Container`__

Nested SVG documents have exactly the same features as the main, top-level SVG document:

```javascript
var nested = draw.nested()

var rect = nested.rect(200, 200)
```

<br>
# SVG.G

Grouping elements can be useful if you want to transform a set of elements as if it were one. All element within a group, maintain their position relative to the group they belong to.

__Note:__ Groups do not have a geometry of their own, it's inherited from their content. Therefore groups do not listen to `x`, `y`, `width` and `height` attributes. If that is what you are looking for, use a `nested()` svg instead.

## group() <span class="suffix">constructor</span>

`returns` __`SVG.G`__ ` which inherits from ` __`SVG.Container`__

 A group has all the same element methods as the root SVG document:

```javascript
var group = draw.group()
group.path('M10,20L30,40')
```

Existing elements from the SVG document can also be added to a group:

```javascript
group.add(rect)
```

<br>
# SVG.Symbol

`returns` __`SVG.Symbol`__ ` which inherits from ` __`SVG.Container`__

Not unlike the `group` element, the `symbol` element is a container element. The only difference between symbols and groups is that symbols are not rendered. Therefore a `symbol` element is ideal in combination with the `use` element:

```javascript
var symbol = draw.symbol()
symbol.rect(100, 100).fill('#f09')

var use  = draw.use(symbol).move(200, 200)
```

<br>
# SVG.Defs

The `<defs>` element is a container for referenced elements. Descendants of a `<defs>`node are not rendered directly. The `<defs>` node lives in the main `<svg>` document and can be accessed with the `defs()` method.

## defs() <span class="suffix">constructor</span>

`returns` __`SVG.Defs`__ ` which inherits from ` __`SVG.Container`__

```javascript
var defs = draw.defs()
```

The defs are also available on any other element through the `doc()` method:

```javascript
var defs = rect.doc().defs()
```

The defs node works exactly the same as groups.

<br>
# SVG.A

Create a hyperlink that will be activated on all child elements.

## link() <span class="suffix">constructor</span>

`returns` __`SVG.A`__ ` which inherits from ` __`SVG.Container`__

A hyperlink or `<a>` tag creates a container that enables a link on all children:

```javascript
var link = draw.link('http://svgdotjs.github.io/')
var rect = link.rect(100, 100)
```

The link url can be updated with the `to()` method:

```javascript
link.to('http://apple.com')
```

Furthermore, the link element has a `show()` method to create the `xlink:show` attribute:

```javascript
link.show('replace')
```

And the `target()` method to create the `target` attribute:

```javascript
link.target('_blank')
```

Elements can also be linked the other way around with the `linkTo()` method:

```javascript
rect.linkTo('http://svgdotjs.github.io/')
```

Alternatively a block can be passed instead of a url for more options on the link element:

```javascript
rect.linkTo(function(link) {
  link.to('http://svgdotjs.github.io/').target('_blank')
})
```

----

Description: The SVG.Parent class is the base wrapper for all elements that can contain other elements. SVG.Parent inherits directly from the lowest level.